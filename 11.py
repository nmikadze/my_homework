# 1. შექმენი ფუნქცია რომელიც მიიღებს სიას და დააბრუნებს ასევე სიას, თუმცა უნიკალური ელემენტებით (გამოიყენე set მონაცემთა ტიპი)
################################################################################################################################

def unique_list(input_list):
    unique_elements = list(set(input_list))
    return input_list, unique_elements

# ფუნქციის გამოძახება
original_list = [1, 2, 2, 3, 7, 7, 4]
input_list, unique_elements = unique_list(original_list)

print("თავდაპირველი სია:", input_list)
print("სია უნიკალური ელემენტები:", unique_elements)


################################################################################################################################
# 2. შექმენი ფუნქცია რომელიც მიიღებს სიას და დააბრუნებს ასევე set ტიპის მონაცემს უნიკალური ელემენტებით, რომლის შეცვლაც შეუძლებელი იქნება (გამოიყენე frozenset).
################################################################################################################################
def unique_set(input_list):
    unique_set = set(input_list)
    return unique_set

# ფუნქციის გამოძახება
original_list = [1, 2, 2, 3, 3, 4, 4]
unique_set_result = unique_set(original_list)

print("სიაში უნიკალური set:", unique_set_result)



################################################################################################################################
#3. შექმენი ფუნქცია რომელიც მიიღებს ორ set ტიპის მონაცემს, გააერთიანებს მათ, შემდეგ კი გადააქცევს tuple ტიპის მონაცემად და დააბრუნებს შედეგს.
################################################################################################################################

def set_to_tuple(set1, set2):
    merged_set = set1.union(set2)
    result_tuple = tuple(merged_set)
    return result_tuple

# ფუნქციის გამოძახება
set1 = {1, 2, 3, 7 }
set2 = {3, 4, 5, 7 }
result_tuple = set_to_tuple(set1, set2)

print("set1:", set1)
print("set2:", set2)
print("შედეგი (tuple):", result_tuple)


################################################################################################################################